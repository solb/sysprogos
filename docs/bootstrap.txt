BOOTSTRAP(C)                TO-D/OS MODULE Documents                BOOTSTRAP(C)

NAME
    bootstrap - Load OS kernel and start it in 64bit mode

SYNOPSIS
  - Loads OS image into memory
  - Loads filesystem image into memory
  - Identity maps the first 1MB of memory (with a PML4, PDPT, PDT, and PT)
  - Sets up GDT / IDT
  - Sets the CPU up for long mode
  - Jumps to the start of kernel code

DESCRIPTION
    The bootstrap is the first piece of code, and it interfaces with the BIOS in
    order to load the kernel code (and filesystem image) from the boot disk. The
    bootstrap also abstracts the initialization dance needed to get the CPU into
    64 bit mode (as well as protected mode and a handful of other important
    rituals), so that the OS kernel can be written to always be in 64 bit mode.
    This is helpful because our linker seems to prefer to only link object files
    of matching architecture, for some reason ;). 

    The following memory layout is set up by the bootstrap:

    0x500 - 0x2500: GDT
    0x2500 - 0x3500: IDT
    0x7c00 - 0x8000: bootstrap
    0x10000 - 0x11000: PML4 (256 TiB)
    0x11000 - 0x12000: PDPT (1st 512 GiB)
    0x12000 - 0x13000: PDT (1st 1 GiB)
    0x13000 - 0x14000: PT (1st 2 MiB)
    0x20000 - 0x40000: OS kernel (does not fill space; has room to grow)
    0x40000 - 0x90000: filesystem image

    Once this is all set up, the bootstrap makes the transition to 64bit mode
    and jumps to the beginning of the kernel at 0x20000.

EXPOSED FUNCTIONALITY
  - begtext:
    Entry point from BIOS

TO-D/OS                          May 19, 2014                            TO-D/OS
